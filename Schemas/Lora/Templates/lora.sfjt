//sfSig:{"sig": "304502205963fe8cd1c10c699e7b0f20e6761f50736081123f7e2345c1c0e7cc333116a6022100f81cf4d579bd5c6fc05502511295c539e1a3a7f9f073036ae9e2e6e7cf21a0a3", "certPEM": "-----BEGIN CERTIFICATE-----$!$MIIDETCCAregAwIBAgIBATAKBggqhkjOPQQDAjBsMQswCQYDVQQGEwJVSzEfMB0G$!$A1UECgwWQ29uZmlndXJlZCBUaGluZ3MgTHRkLjENMAsGA1UECwwEY3R4ZDEOMAwG$!$A1UECwwFVXNlcnMxHTAbBgNVBAMMFGN0eGQtdXNlcnMtYWRtaW5zLWNhMB4XDTI0$!$MDgxNjE4MDkxN1oXDTM0MDgxNDE4MDkxN1owYDELMAkGA1UEBhMCVUsxHzAdBgNV$!$BAoMFkNvbmZpZ3VyZWQgVGhpbmdzIEx0ZC4xDTALBgNVBAsMBGN0eGQxDjAMBgNV$!$BAsMBVVzZXJzMREwDwYDVQQDDAhjdC1hZG1pbjBZMBMGByqGSM49AgEGCCqGSM49$!$AwEHA0IABAT8rSVBw5oFDMkdkfez3rM3Na8gSIb3SSlovkoA6T7J1vDueZyqrndI$!$aDbvQjKDYxT1p7DdsB7etGP3WDocEXOjggFUMIIBUDCBjgYIKwYBBQUHAQEEgYEw$!$fzBFBggrBgEFBQcwAoY5aHR0cDovL2N0eGQtdXNlcnMtYWRtaW5zLWNhLmN0eGQv$!$Y3R4ZC11c2Vycy1hZG1pbnMtY2EuY3J0MDYGCCsGAQUFBzABhipodHRwOi8vb2Nz$!$cC5jdHhkLXVzZXJzLWFkbWlucy1jYS5jdHhkOjkwODEwHwYDVR0jBBgwFoAUEu3Q$!$qtIP3h8krX5fHcLRiKhyIYIwDAYDVR0TAQH/BAIwADBKBgNVHR8EQzBBMD+gPaA7$!$hjlodHRwOi8vY3R4ZC11c2Vycy1hZG1pbnMtY2EuY3R4ZC9jdHhkLXVzZXJzLWFk$!$bWlucy1jYS5jcmwwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDgYDVR0PAQH/BAQDAgeA$!$MB0GA1UdDgQWBBSqYd9d6yD2b9hzT37PD3ZoIe3D2DAKBggqhkjOPQQDAgNIADBF$!$AiEApvBDT8tEWIWefweWT1fcWZ/dt+jEUELDrxlZbqFrFE0CIHKsX7gB5bjq926w$!$SBRfgBLzqVIJl9m35EBBgmrSE5+3$!$-----END CERTIFICATE-----$!$", "description": "", "timestamp":"1755276833904", "timelimit":"0"}
//sfTimestamp:1755276833904
//sfLabel:/opt/ct/signing/files/Schemas/Lora/Templates/lora.sfjt

//
// Schema for Chirpstack data payload received from MQTT.

let 

    MQTT_DATA: require('../../System/Templates/mqtt.sfjt'),

    //
    // Schema definition for deviceInfo
    //
    LORA_DEVICE_INFO: {
        type: object,
        properties: {
            tenantId: {type: string, format: uuid},
            tenantName: {type: string},
            applicationId: {type: string, format: uuid},
            applicationName: {type: string},
            deviceProfileId: {type: string, format: uuid},
            deviceProfileName: {type: string},
            deviceName: {type: string},
            devEui: {type: string, maxLength:16},
            deviceClassEnabled: {type: string},
            tags: {type: object}
        },
        required: [
            tenantId, tenantName,
            applicationId, applicationName,
            deviceProfileId, deviceProfileName,
            deviceName, devEui,
            deviceClassEnabled,
        ],
        additionalProperties: false            
    },
    

    //
    // Schema definition for the Metadata of a LoRa Gateway
    // provided in rxinfo
    //
    LORA_GATEWAY_INFO: {
        type: object,
        properties: {
            gatewayId: {type: string},
            uplinkId: {type: number},
            nsTime: {type: string},
            rssi: {type: integer},
            snr: {type: number},
            channel: {type: number},
            rfChain: {type: number},
            location: {
                type: object,
                properties: {
                    latitude: {type: number},
                    longitude: {type: number},
                    altitude: {type: integer}
                },
                required: [latitude, longitude, altitude]
            },
            context: {type: string},
            metadata: {
                type: object,
                properties: {
                    region_config_id: {type: string},
                    region_common_name: {type: string},    
                },
                required: [region_config_id, region_common_name]
            },
            crcStatus: {type: string}
        },
        required: [
            // channel and rfChain seems to be optional
            gatewayId, uplinkId, nsTime, rssi, snr,
            location, context, metadata, crcStatus
        ],
        additionalProperties: false,         
    },

    LORA_TX_INFO: {
        type: object,
        properties: {
            frequency: {type: integer},
            modulation: {
                type: object,
                properties: {
                    lora: {
                        type: object,
                        properties: {
                            bandwidth: {type: integer},
                            spreadingFactor: {type: integer},
                            codeRate: {type: string}
                        },
                        required: [bandwidth, spreadingFactor, codeRate],
                        additionalProperties: false,
                    }
                },
                required: [lora],
                additionalProperties: false,
            }
        },
        required: [frequency, modulation],
        additionalProperties: false            
    },

    LORA_DATA: {
        type: object,
        properties: {
            deduplicationId: {type: string, format: uuid},
            time: {type: string},
            deviceInfo: $LORA_DEVICE_INFO,
            rxInfo: {type: array, items: [ $LORA_GATEWAY_INFO ]},
            txInfo: $LORA_TX_INFO,
            devAddr: {type: string},
            adr: {type: boolean},
            dr: {type: integer},
            fCnt: {type: integer, minimum: 0, maximum: 4294967295},
            fPort: {type: integer},
            confirmed: {type: boolean},
            data: {type: string},
            object: {type: object},
            ts: {type: integer}
        },
        required: [
            deduplicationId,
            time,
            deviceInfo,
            rxInfo,
            txInfo,
            devAddr,
            adr,
            dr,
            fCnt,
            fPort,
            confirmed,
            data,
        ],
        additionalProperties: false            
    }

in    

    //
    // Generic schema definition for a LoRa object provided by Chirpstack.  Schemas
    // for a specific device type should extend this by providing the schema for
    // their specific payload as the "payload" value and then using the .schema
    // element
    //
    //  let
    //     LORA_DEVICE: require('./Templates/lora.sfjt')
    // in
    // {   
    //    mySchema: ($LORA_DEVICE << {
    //        payload: {
    //            type: object,
    //            properties : {
    //                data: {
    //                    type: object,
    //                    properties: {  
    //                        temperature: {type: number,  minimum: -20, maximum: 120},
    //                        light:       {type: integer, minimum: 0,   maximum: 1000},
    //                        battery:     {type: integer, minimum: 0,   maximum: 4000},
    //                        motion:      {type: integer, minimum: 0,   maximum: 100}
    //                    },
    //                    required: [temperature, light, battery, motion],
    //                    additionalProperties: false
    //                },
    //            required: [data],
    //            additionalProperties: false    
    //        },
    //    }).schema,
    //
    
    {
        payload: {},
        schema: $MQTT_DATA << {  
            properties: {
                data: $LORA_DATA << {
                    properties: {
                        object: @payload
                    }
                },
            }    
        }
    }
