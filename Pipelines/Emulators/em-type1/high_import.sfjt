//sfSig:{"sig": "30440220483534d8cc45bbc63141c3ebfe648931e32ba28b90c82112381038eda6cc82090220351ff55ca046ff2c2ef2b713e543b8ed98665573496358f15f80645351f3f781", "certPEM": "-----BEGIN CERTIFICATE-----$!$MIIDETCCAregAwIBAgIBATAKBggqhkjOPQQDAjBsMQswCQYDVQQGEwJVSzEfMB0G$!$A1UECgwWQ29uZmlndXJlZCBUaGluZ3MgTHRkLjENMAsGA1UECwwEY3R4ZDEOMAwG$!$A1UECwwFVXNlcnMxHTAbBgNVBAMMFGN0eGQtdXNlcnMtYWRtaW5zLWNhMB4XDTI0$!$MDgxNjE4MDkxN1oXDTM0MDgxNDE4MDkxN1owYDELMAkGA1UEBhMCVUsxHzAdBgNV$!$BAoMFkNvbmZpZ3VyZWQgVGhpbmdzIEx0ZC4xDTALBgNVBAsMBGN0eGQxDjAMBgNV$!$BAsMBVVzZXJzMREwDwYDVQQDDAhjdC1hZG1pbjBZMBMGByqGSM49AgEGCCqGSM49$!$AwEHA0IABAT8rSVBw5oFDMkdkfez3rM3Na8gSIb3SSlovkoA6T7J1vDueZyqrndI$!$aDbvQjKDYxT1p7DdsB7etGP3WDocEXOjggFUMIIBUDCBjgYIKwYBBQUHAQEEgYEw$!$fzBFBggrBgEFBQcwAoY5aHR0cDovL2N0eGQtdXNlcnMtYWRtaW5zLWNhLmN0eGQv$!$Y3R4ZC11c2Vycy1hZG1pbnMtY2EuY3J0MDYGCCsGAQUFBzABhipodHRwOi8vb2Nz$!$cC5jdHhkLXVzZXJzLWFkbWlucy1jYS5jdHhkOjkwODEwHwYDVR0jBBgwFoAUEu3Q$!$qtIP3h8krX5fHcLRiKhyIYIwDAYDVR0TAQH/BAIwADBKBgNVHR8EQzBBMD+gPaA7$!$hjlodHRwOi8vY3R4ZC11c2Vycy1hZG1pbnMtY2EuY3R4ZC9jdHhkLXVzZXJzLWFk$!$bWlucy1jYS5jcmwwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDgYDVR0PAQH/BAQDAgeA$!$MB0GA1UdDgQWBBSqYd9d6yD2b9hzT37PD3ZoIe3D2DAKBggqhkjOPQQDAgNIADBF$!$AiEApvBDT8tEWIWefweWT1fcWZ/dt+jEUELDrxlZbqFrFE0CIHKsX7gB5bjq926w$!$SBRfgBLzqVIJl9m35EBBgmrSE5+3$!$-----END CERTIFICATE-----$!$", "description": "Pipelines/Emulators/em-type1/high_import.sfjt signed by ct-admin", "timestamp":"1761222321562", "timelimit":"0"}
//sfTimestamp:1761222321562
//sfLabel:Pipelines/Emulators/em-type1/high_import.sfjt

//
// Telemetry Pipeline for type 1 Emulators - High
//

let
    SRC_DIR: env(CT_HOME) + '/src/',
    TEMPLATE_DIR: env(CT_HOME) + '/templates/',

    // Templates configured for this domain
    XD_RECEIVER:       require($TEMPLATE_DIR + 'XD_Receiver.sfjs'),
    SCHEMA_CHECKER:    require($TEMPLATE_DIR + 'Schema_Checker.sfjs'),
    FUNCTION:          require($TEMPLATE_DIR + 'Jsonata.sfjs'),
    MQTT_SENDER:       require($TEMPLATE_DIR + 'MQTT_Sender.sfjs'),
    TB_SENDER:         require($TEMPLATE_DIR + 'ThingsBoard_Sender.sfjs'),
    STATS:             require($TEMPLATE_DIR + 'Pipeline_Stats.sfjs'),

in
{

    Receiver: $XD_RECEIVER << {
        id: 'em-type1',
        targets: {
            default: SchemaCheck,
        },
    },

    // Selectively add senders depending on the configured integrations  
    Senders: [null, null] <<
        if @integrations.mqtt.enabled then
            [MQTT, _]
        else
            []
        fi <<
        if @integrations.thingsboard.enabled then
            [_, "ThingsBoard.Parser"]
        else
            []
        fi,

    // Schema Checker
    SchemaCheck: $SCHEMA_CHECKER << {
        targets:   {default: @Senders},
    },


    // Sent to MQTT.  As this is the last node also 
    // send the pipeline stats
    MQTT: if @integrations.mqtt.enabled then
        $MQTT_SENDER << {
            format: 'json',
            targets: {stats: Stats},
        }
        else
            {}
        fi,


    // Get Lora Values as metrics for Thingsboard
    ThingsBoard: if @integrations.thingsboard.enabled then
        {
        
            Parser: $FUNCTION << {

                // Path to High side configurtaion data
                configPath: ['Emulators'],

                // Functions to apply to each message
                functions: {
                    default: {name: GetLoRaValues, operation: replace}
                },

                // Pass the extracted metrics to Thingboard
                targets:   {default: ThingsBoardSender},
            },
    
            // Sent to Thingboard
            ThingsBoardSender: $TB_SENDER << {
                configPath: ['Emulators']
            }
        }
    else
        {}
    fi,
}
