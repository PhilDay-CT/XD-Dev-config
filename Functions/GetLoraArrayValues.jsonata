//sfSig:{"sig": "304502205563ecb5523e8e55b5a4d34cdf62e9238b73292d8b83f3a9aa12577877aefde0022100da784d3147ac66180232c26278029a63b277aa6c17f4b05400cee330a3e2770a", "certPEM": "-----BEGIN CERTIFICATE-----$!$MIIDETCCAregAwIBAgIBATAKBggqhkjOPQQDAjBsMQswCQYDVQQGEwJVSzEfMB0G$!$A1UECgwWQ29uZmlndXJlZCBUaGluZ3MgTHRkLjENMAsGA1UECwwEY3R4ZDEOMAwG$!$A1UECwwFVXNlcnMxHTAbBgNVBAMMFGN0eGQtdXNlcnMtYWRtaW5zLWNhMB4XDTI0$!$MDgxNjE4MDkxN1oXDTM0MDgxNDE4MDkxN1owYDELMAkGA1UEBhMCVUsxHzAdBgNV$!$BAoMFkNvbmZpZ3VyZWQgVGhpbmdzIEx0ZC4xDTALBgNVBAsMBGN0eGQxDjAMBgNV$!$BAsMBVVzZXJzMREwDwYDVQQDDAhjdC1hZG1pbjBZMBMGByqGSM49AgEGCCqGSM49$!$AwEHA0IABAT8rSVBw5oFDMkdkfez3rM3Na8gSIb3SSlovkoA6T7J1vDueZyqrndI$!$aDbvQjKDYxT1p7DdsB7etGP3WDocEXOjggFUMIIBUDCBjgYIKwYBBQUHAQEEgYEw$!$fzBFBggrBgEFBQcwAoY5aHR0cDovL2N0eGQtdXNlcnMtYWRtaW5zLWNhLmN0eGQv$!$Y3R4ZC11c2Vycy1hZG1pbnMtY2EuY3J0MDYGCCsGAQUFBzABhipodHRwOi8vb2Nz$!$cC5jdHhkLXVzZXJzLWFkbWlucy1jYS5jdHhkOjkwODEwHwYDVR0jBBgwFoAUEu3Q$!$qtIP3h8krX5fHcLRiKhyIYIwDAYDVR0TAQH/BAIwADBKBgNVHR8EQzBBMD+gPaA7$!$hjlodHRwOi8vY3R4ZC11c2Vycy1hZG1pbnMtY2EuY3R4ZC9jdHhkLXVzZXJzLWFk$!$bWlucy1jYS5jcmwwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDgYDVR0PAQH/BAQDAgeA$!$MB0GA1UdDgQWBBSqYd9d6yD2b9hzT37PD3ZoIe3D2DAKBggqhkjOPQQDAgNIADBF$!$AiEApvBDT8tEWIWefweWT1fcWZ/dt+jEUELDrxlZbqFrFE0CIHKsX7gB5bjq926w$!$SBRfgBLzqVIJl9m35EBBgmrSE5+3$!$-----END CERTIFICATE-----$!$", "description": "", "timestamp":"1755533919336", "timelimit":"0"}
//sfTimestamp:1755533919336
//sfLabel:/opt/ct/signing/files/Functions/GetLoraArrayValues.jsonata

/* General function to get telemery values in array form  */
/* into a set of data structures that can be sent to      */
/* Thingsboard.   Also adds flattened toxicity values     */
/* and gateway metadata                                   */
/*                                                        */
/* Incomming data should be in the following array format */
/* (as used for example by Watteco devices)               */
/*                                                        */
/*    data.object.data: [                                 */
/*        {                                               */
/*            date:  <ISO data string>,                   */
/*            label: <string>,                            */
/*            value: <value>                              */
/*        },                                              */
/*        {...}                                           */
/*    ]                                                   */
/*                                                        */
/* Each entry in the data becomes a new value sent to TB  */
/*                                                        */
(
    $ts := (input.data.ts)?input.data.ts:input.ts;
    $devID := input.data.deviceInfo.devEui;

    /* Get the signal metadata from each gatway */
    $gw_meta := input.data.rxInfo.{
        $join(["gateway","rssi",name], '.'): rssi,
        $join(["gateway","loRaSNR", name], '.'): loRaSNR
    }~>$merge;

    /* Build a flattend set of toxicity values */
    $tox := $each(input.toxicity, function ($v,$k) {
            ($v.toxic or $v.toxic = 0)?{
                $join(["toxicity", $k], '.'): $v.toxic
            }:$each($v, function($vv, $vk) {
                  {$join(["toxicity", $k, $vk], '.'): $vv.toxic}
            })~>$merge  
    })~>$merge;

    /* Create an array of output messages */
    $values := input.data.object.data.{
        "kind": "telemetry",
        "devId": $devID,
        "data": {
            "ts": $toMillis(date),
            "values": $merge([
                {label: value},
                $tox,
                $gw_meta,
                {"fCnt": $$.input.data.fCnt},
                {"tx.frequency": $$.input.data.txInfo.frequency},
                {"tx.dataRate":  $$.input.data.txInfo.dr},
                {"toxicity": $$.input.toxicity}
            ])
        }
    };

    {
        "outputs": {"default": $values}
    }
)
